openapi: 3.0.0
info:
  title: Flask Real-time API
  description: |-
    A simple CRUD API for Users and a real-time Playlist, built with Flask, MongoDB, and Socket.IO.
    This documentation covers both the RESTful endpoints for data management and the asynchronous Socket.IO events for real-time communication.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
    description: Local development server

paths:
  /users:
    get:
      summary: Get All Users
      description: Retrieves a list of all users from the database.
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a New User
      description: Creates a new user and broadcasts a 'new_user' event via Socket.IO.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully!
                  id:
                    type: string
                    example: '64f8c6b7e8d1c2e3f4a5b6d7'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the user to retrieve, update, or delete.
        schema:
          type: string
    get:
      summary: Get a Single User
      description: Retrieves a single user by their ID.
      responses:
        '200':
          description: The requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID format.
        '404':
          description: User not found.
    put:
      summary: Update a User
      description: Updates an existing user's details and broadcasts an 'updated_user' event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully.
        '400':
          description: Invalid ID format.
        '404':
          description: User not found.
    delete:
      summary: Delete a User
      description: Deletes a user and broadcasts a 'deleted_user' event.
      responses:
        '200':
          description: User deleted successfully.
        '400':
          description: Invalid ID format.
        '404':
          description: User not found.
  /playlist/songs:
    get:
      summary: Get Playlist Songs
      description: Retrieves the list of all songs in the playlist.
      responses:
        '200':
          description: A list of songs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Song'

webhooks:
  newUser:
    post:
      summary: New User Event
      description: Event broadcast to all clients when a new user is created.
      requestBody:
        description: User data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Acknowledges the event was received by the client (client-side implementation).
  updatedUser:
    post:
      summary: Updated User Event
      description: Event broadcast to all clients when a user's data is updated.
      requestBody:
        description: Updated user data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Acknowledges the event was received.
  deletedUser:
    post:
      summary: Deleted User Event
      description: Event broadcast to all clients when a user is deleted.
      requestBody:
        description: ID of the deleted user.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The ID of the deleted user.
      responses:
        '200':
          description: Acknowledges the event was received.
  newSong:
    post:
      summary: New Song Event
      description: Event broadcast to all clients when a new song is added to the playlist.
      requestBody:
        description: Data for the new song.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Song'
      responses:
        '200':
          description: Acknowledges the event was received.

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The user's unique ID.
          example: '64f8c6b7e8d1c2e3f4a5b6d7'
        name:
          type: string
          description: The user's name.
          example: Jane Doe
        email:
          type: string
          format: email
          description: The user's email address.
          example: jane.doe@example.com
    UserInput:
      type: object
      properties:
        name:
          type: string
          description: The user's name.
          example: John Doe
        email:
          type: string
          format: email
          description: The user's email address.
          example: john.doe@example.com
    Song:
      type: object
      properties:
        id:
          type: string
          description: The song's unique ID.
          example: 'a1b2c3d4e5f6a7b8c9d0e1f2'
        title:
          type: string
          description: The title of the song.
          example: Bohemian Rhapsody
        artist:
          type: string
          description: The artist of the song.
          example: Queen
